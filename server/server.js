// –ò–Ω–∫–ª—é–¥—ã
const express = require("express");
const bcrypt = require("bcrypt");
const {v4: uuidv4} = require("uuid");
const {Faker, ru} = require('@faker-js/faker'); // –î–õ–Ø –¢–ï–°–¢–ê

const cookieParser = require("cookie-parser");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const APP_PORT = 9999;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º API —Å —Å–∞–π—Ç–∞, —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:9998');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Access-Control-Allow-Credentials', true);
    next();
});

// Middleware - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö JSON –∏ Cookie
app.use(express.json());
app.use(cookieParser());
app.use(express.static('public'));

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
const users = new Map();
const sessions = new Map();
const posts = new Map();

// –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 30 –º–∏–Ω—É—Ç
const SESSION_DURATION_MS = 30 * 60 * 1000;

const faker = new Faker({locale: [ru]}); // –î–õ–Ø –¢–ï–°–¢–ê

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç—ã –¥–ª—è –Ω–∏—Ö.
 * @param {number} userCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.
 * @param {number} postsPerUser - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
const createTestData = async (userCount, postsPerUser) => {
    console.log(`ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${postsPerUser} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ...`);

    for (let i = 0; i < userCount; i++) {
        const username = faker.internet.userName().toLowerCase();
        const name = faker.person.fullName();
        const password = 'password123';
        const passwordHash = await bcrypt.hash(password, 10);

        if (users.has(username)) continue;

        users.set(username, {
            passwordHash,
            name,
            description: faker.lorem.sentence(),
            photoUrl: '',
            likedPosts: new Set(),
        });

        for (let j = 0; j < postsPerUser; j++) {
            const postId = uuidv4();
            posts.set(postId, {
                id: postId,
                content: faker.lorem.paragraph(),
                author: username,
                authorName: name,
                likes: new Set(),
                comments: [],
                createdAt: faker.date.past().toISOString(),
            });
        }
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}, –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${posts.size}`);
};

createTestData(5, 3);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
    const {username, password} = req.body;

    if (users.has(username)) {
        return res.status(409).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'});
    }

    // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const saltRound = 10;
    const passwordHash = await bcrypt.hash(password, saltRound);

    users.set(username, {
        passwordHash,
        name: "New User",
        description: '',
        photoUrl: ``,
        likedPosts: new Set(),
    });

    console.log('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
    console.log('–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
    console.table(users);
    console.log('---------------------------------------\n\n');

    return res.status(201).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'});
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/login', async (req, res) => {
    const {username, password} = req.body;
    const user = users.get(username);

    if (!user) {
        return res.status(401).json({message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'});
    }
    const isPasswordCorrect = await bcrypt.compare(password, user.passwordHash);
    if (!isPasswordCorrect) {
        return res.status(401).json({message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å'});
    }

    if (req.cookies.sessionId) {
        sessions.delete(req.cookies.sessionId);
    }

    // –£–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏.
    const sessionId = uuidv4();
    const expires = new Date().getTime() + SESSION_DURATION_MS;

    sessions.set(sessionId, {userId: username, expires: expires})

    console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
    console.log('–¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏:');
    console.table(sessions);
    console.log('---------------------------------------\n\n');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Cookie
    res.cookie('sessionId', sessionId, {
        httpOnly: true, // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ JS –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ,
        expires: new Date(expires)
    });

    return res.status(200).json({message: '–£—Å–ø–µ—Ö'});
});

// –í—ã—Ö–æ–¥
app.post('/api/logout', (req, res) => {
    const {sessionId} = req.cookies;
    if (sessionId) sessions.delete(sessionId);
    req.cookies.clear('sessionId');
    res.status(200).json({message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'});
});


// MIDDLEWARE –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const authMiddleware = (req, res, next) => {
    const {sessionId} = req.cookies;
    if (!sessionId)
        return res.status(401).json({message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'});

    const session = sessions.get(sessionId);
    if (!session || new Date().getTime() > session.expires) {
        if (session) sessions.delete(sessionId);
        res.clearCookie('sessionId');
        return res.status(401).json({message: '–°–µ—Å—Å–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'});
    }

    req.user = users.get(session.userId);
    req.user.username = session.userId;

    if (!req.user) {
        return res.status(401).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'});
    }

    next();
}

const postMiddleware = (req, res, next) => {
    const {sessionId} = req.cookies;
    if (!sessionId)
        req.user = null;
    else {
        const session = sessions.get(sessionId);
        if (!session || new Date().getTime() > session.expires) {
            if (session) sessions.delete(sessionId);
            res.clearCookie('sessionId');
            return res.status(401).json({message: '–°–µ—Å—Å–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'});
        }

        req.user = users.get(session.userId);
        req.user.username = session.userId;

        if (!req.user) {
            req.user = null;
        }
    }

    next();
}

app.post('/', authMiddleware, (req, res) => {
    return res.status(200).json({message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω"});
});

app.post('/api/profile/:username', (req, res) => {

});

app.post('/api/posts', authMiddleware, (req, res) => {

});

app.get('/api/posts', postMiddleware, (req, res) => {
    const allPosts = Array.from(posts.values()).map(post => {
        const postData = {
            id: post.id,
            content: post.content,
            author: post.author,
            authorName: post.authorName,
            createdAt: post.createdAt,
            comments: post.comments,
            likesCount: post.likes.size
        };

        if (req.user) {
            postData.isLiked = post.likes.has(req.user.username);
        }

        return postData;
    });
    allPosts.sort((a, b) => {
        return new Date(b.createdAt) - new Date(a.createdAt);
    });

    return res.status(200).json(allPosts);
});

app.get('/api/posts/user/:username', (req, res) => {

});

app.post('/api/posts/:postId/like', authMiddleware, (req, res) => {
    const {postId} = req.params;
    const post = posts.get(postId);

    if (!post) return res.status(404).json({message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'});

    const userLikes = post.likes;
    if (userLikes.has(req.user.username)) {
        userLikes.delete(req.user.username);
        req.user.likedPosts.delete(postId);
        return res.status(200).json({likesCount: userLikes.size, showLike: false});
    }

    userLikes.add(req.user.username);
    req.user.likedPosts.add(postId);

    return res.status(200).json({likesCount: userLikes.size, showLike: true});
});

app.get('/api/posts/:postId/like', postMiddleware, (req, res) => {
    const {postId} = req.params;
    const post = posts.get(postId);

    if (!post) return res.status(404).json({message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'});

    const userLikes = post.likes;

    if (req.user) {
        if (userLikes.has(req.user.username)) {
            return res.status(200).json({likesCount: userLikes.size, showLike: true});
        }
    }
    return res.status(200).json({likesCount: userLikes.size, showLike: false});
});


app.post('/api/posts/:postId/comments', authMiddleware, (req, res) => {

});

app.delete('/api/posts/:postId/comments/:commentId', authMiddleware, (req, res) => {

});

app.get('/api/search', (req, res) => {

});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(APP_PORT, () => {
    console.log(`Server start on: http://localhost:${APP_PORT}`)
})
